1) #include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <iomanip>

using namespace std;

void swap(int* x, int* y)
{
	int temp = *x;
	*x = *y;
	*y = temp;
}
void selectionsort(int arr[], int n)
{
	int i, j, minindex;
	for (i = 0; i < n - 1; i++)
	{
		minindex = i;
		for (j = i + 1; j < n; j++)
			if (arr[j] < arr[minindex])
				minindex = j;
		swap(&arr[minindex], &arr[i]);
	}
}
void printarray(int arr[], int n)
{
	for (int i = 0; i < n; i++)
		cout << arr[i] << " ";
	cout << endl;
}

main()
{
	int arr[] = { 2, 6, 1, 76, 52, 459, 10, 38, 42 };
	int n = sizeof(arr) / sizeof(arr[0]);
	selectionsort(arr, n);
	cout << "Sortes arr: \n";
	printarray(arr, n);
	
	return 0;
}

2) 
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <iomanip>

using namespace std;


void printArray(int arr[], int len)
{
	for (int i = 0; i < len, i++)
	{
		cout << arr[i] << " ";
	}
	cout << "]\n";
}
void bubblesort(int arr[], int N)
{
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N - i - 1; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				int temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
	} cout << "Output: " << (i + 1) << " [";
}

3) #include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <iomanip>

using namespace std;

void insertionSort(int*, int);

int main(int argc, char* argv[])
{
	srand(time(NULL));
	setlocale(LC_ALL, "rus");
	cout << "Введите размер массива: ";
	int size_arr; 
	cin >> size_arr;

	int* sorted_arr = new int[size_arr]; 
	for (int counter = 0; counter < size_arr; counter++)
	{
		sorted_arr[counter] = rand() % 100; 
		cout << setw(2) << sorted_arr[counter] << "  "; 
	}
	cout << "n";

	insertionSort(sorted_arr, size_arr); 

	for (int counter = 0; counter < size_arr; counter++)
	{
		cout << setw(2) << sorted_arr[counter] << "  "; 
	}
	cout << "n";
	delete[] sorted_arr; 
	system("pause");
	return 0;
}

void insertionSort(int* arrayPtr, int length)
{
	int temp, 
		item; 
	for (int counter = 1; counter < length; counter++)
	{
		temp = arrayPtr[counter]; 
		item = counter - 1; 
		while (item >= 0 && arrayPtr[item] > temp) 
		{
			arrayPtr[item + 1] = arrayPtr[item];
			arrayPtr[item] = temp;
			item--;
		}
	}
}